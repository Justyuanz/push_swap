# === Configuration ===
NAME = push_swap
CC = cc
CFLAGS = -g -Wall -Wextra -Werror
DFLAGS = -MMD -MP -I include

SRCDIR = src
OBJDIR = obj
VEC_DIR = c_vec
VEC_A = $(VEC_DIR)/c_vec.a

# === Source Files ===
SRCS = $(addprefix $(SRCDIR)/,\
	main.c \
	input_parsing/input_parsing.c \
	input_parsing/split_argv.c \
	input_parsing/utils.c \
	utils\malloc_free.c \

)

OBJS = $(SRCS:$(SRCDIR)/%.c=$(OBJDIR)/%.o)
# Dependency files generated by -MMD -MP
DEPS = $(OBJS:.o=.d)

# === Default Target ===
all: $(NAME)

# === Build Vec Archive ===
$(VEC_A):
	make -C $(VEC_DIR)

# === Build Executable ===
$(NAME): $(OBJS) $(VEC_A)
		cp $(VEC_A) $(NAME)
		$(CC) $(CFLAGS) $(OBJS) -o $(NAME)

# === Compile Rule for .c to .o ===
#silently make the directory that contains that output file
$(OBJDIR)/%.o: $(SRCDIR)/%.c
			mkdir -p $(@D)
			$(CC) $(CFLAGS) $(DFLAGS) -c $< -o $@

# === Clean rule ===
clean:
		rm -rf $(OBJDIR)
		make clean -C $(VEC_DIR)

fclean: clean
		rm -rf $(NAME)
		make fclean -C $(VEC_DIR)

re: fclean all


.PHONY: all clean fclean re
.SECONDARY: $(OBJS)
#includes the .d files, - don’t throw error if doesn’t exist(first build)
-include $(DEPS)